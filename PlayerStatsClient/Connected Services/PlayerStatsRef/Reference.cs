//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlayerStatsClient.PlayerStatsRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStatistics", Namespace="http://schemas.datacontract.org/2004/07/PlayerStatsService")]
    [System.SerializableAttribute()]
    public partial class PlayerStatistics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlayerStatsRef.IPlayerStatsService")]
    public interface IPlayerStatsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerStatsService/GetPlayerName", ReplyAction="http://tempuri.org/IPlayerStatsService/GetPlayerNameResponse")]
        string GetPlayerName(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerStatsService/GetPlayerName", ReplyAction="http://tempuri.org/IPlayerStatsService/GetPlayerNameResponse")]
        System.Threading.Tasks.Task<string> GetPlayerNameAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerStatsService/GetPlayerStats", ReplyAction="http://tempuri.org/IPlayerStatsService/GetPlayerStatsResponse")]
        PlayerStatsClient.PlayerStatsRef.PlayerStatistics GetPlayerStats(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerStatsService/GetPlayerStats", ReplyAction="http://tempuri.org/IPlayerStatsService/GetPlayerStatsResponse")]
        System.Threading.Tasks.Task<PlayerStatsClient.PlayerStatsRef.PlayerStatistics> GetPlayerStatsAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerStatsServiceChannel : PlayerStatsClient.PlayerStatsRef.IPlayerStatsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerStatsServiceClient : System.ServiceModel.ClientBase<PlayerStatsClient.PlayerStatsRef.IPlayerStatsService>, PlayerStatsClient.PlayerStatsRef.IPlayerStatsService {
        
        public PlayerStatsServiceClient() {
        }
        
        public PlayerStatsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerStatsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerStatsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerStatsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetPlayerName(int playerId) {
            return base.Channel.GetPlayerName(playerId);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerNameAsync(int playerId) {
            return base.Channel.GetPlayerNameAsync(playerId);
        }
        
        public PlayerStatsClient.PlayerStatsRef.PlayerStatistics GetPlayerStats(int playerId) {
            return base.Channel.GetPlayerStats(playerId);
        }
        
        public System.Threading.Tasks.Task<PlayerStatsClient.PlayerStatsRef.PlayerStatistics> GetPlayerStatsAsync(int playerId) {
            return base.Channel.GetPlayerStatsAsync(playerId);
        }
    }
}
